{"/about/":{"data":{"":"rpxy [ahr-pik-see] is designed to be a high-performance, secure, and reliable HTTP reverse-proxy. It is built on top of the Rust programming language and Rust ecosystem libraries. rpxy is designed to be a drop-in replacement for the popular HTTP reverse proxies such as NGINX and Caddy, considering performance-focused environment.\nrpxy is built under the concepts of simple configuration, blazingly fast message handling, and secure by default. It is also designed to be a high-performance HTTP reverse-proxy that can handle a large number of concurrent connections with minimal resource usage.","credits#Credits":"rpxy cannot be built without the following projects and inspirations:\nhyper and hyperium/h3\nrustls\ntokio\nquinn\ns2n-quic\nrustls-acme"},"title":"About"},"/docs/":{"data":{"":" Getting Started Using Containers Configuration Options "},"title":"Documentation"},"/docs/configuration/":{"data":{"":"TBD"},"title":"Configuration Options"},"/docs/container/":{"data":{"":"TBD"},"title":"Using Containers"},"/docs/container/docker/":{"data":{"":"TBD"},"title":"Docker Images"},"/docs/guide/basics/":{"data":{"":"Here we explain some typical setups for rpxy. We will start with the most basic setup and gradually introduce more advanced features."},"title":"Basic Setups"},"/docs/guide/basics/cleartext/":{"data":{"":"TBD"},"title":"1. Cleartext HTTP Reverse Proxy"},"/docs/guide/basics/routing/":{"data":{"":"TBD"},"title":"3. More Flexible Routing Based on URL Path"},"/docs/guide/basics/tls/":{"data":{"":"TBD"},"title":"2. Terminating TLS"},"/docs/guide/cmdopt/":{"data":{"":"rpxy always requires a configuration file in TOML format, e.g., config.toml on GitHub repo.\nℹ️ The detailed configuration options are described in the Configuration Options section. You can run rpxy with a configuration file like\n% ./path/to/rpxy --config config.toml If you specify -w option along with the config file path, rpxy tracks the change of config.toml in the real-time manner and apply the change immediately without restarting the process.\nThe full help messages are given follows.\nusage: rpxy [OPTIONS] --config \u003cFILE\u003e Options: -c, --config \u003cFILE\u003e Configuration file path like ./config.toml -w, --watch Activate dynamic reloading of the config file via continuous monitoring -h, --help Print help -V, --version Print version That’s all!"},"title":"Command Line Options"},"/docs/guide/installation/":{"data":{"":"","building-from-source#Building from Source":"You can build an executable binary yourself by checking out this Git repository.\n# Cloning the git repository % git clone https://github.com/junkurihara/rust-rpxy % cd rust-rpxy # Update submodules % git submodule update --init # Build (default: QUIC and HTTP/3 is enabled using `quinn`) % cargo build --release # If you want to use `s2n-quic`, build as follows. You may need several additional dependencies. % cargo build --no-default-features --features http3-s2n --release Then you have an executive binary rust-rpxy/target/release/rpxy.","package-installation-for-linux-rpmdeb#Package Installation for Linux (RPM/DEB)":"You can find the Jenkins CI/CD build scripts for rpxy in the ./.build directory.\nPrebuilt packages for Linux RPM and DEB are available at https://rpxy.gamerboy59.dev, provided by @Gamerboy59.\nℹ️ Note that we do not have an option of installation via crates.io, i.e., cargo install, at this point since some dependencies are not published yet. Alternatively, you can use docker image (see Container section) as the easiest way for amd64 environment. "},"title":"Installation"}}